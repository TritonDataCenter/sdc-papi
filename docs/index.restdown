---
title: SDC 7 Package API
markdown2extras: wiki-tables, code-friendly
apisections: Package Objects, Packages, Ping, Changelog
---

# SDC 7 Package API

Note that, internally, with independence of the name choosen by Marketing,
specifications used to create a machine from a given image are called packages,
and referred as packages by all the APIs.


## Package Objects

Package entries are stored in Moray in the form of JSON objects. Here is
an example of a package:


    {
        uuid: "7fc87f43-2def-4e6f-9f8c-980b0385b36e",
        active: true,
        cpu_cap: 25,
        default: false,
        group: "Standard",
        description: "Micro 0.25 GB RAM 0.125 CPUs 16 GB Disk",
        max_lwps: 4000,
        max_physical_memory: 256,
        max_swap: 512,
        name: "g3-standard-0.25-smartos",
        common_name: "Standard 0.25",
        quota: 16384,
        networks: ["1e7bb0e1-25a9-43b6-bb19-f79ae9540b39", "193d6804-256c-4e89-a4cd-46f045959993"],
        version: "1.0.0",
        zfs_io_priority: 100,
        fss: 25,
        cpu_burst_ratio: 0.5,
        ram_ratio: 1.995012469,
        overprovision_cpu: 2,
        overprovision_memory: 1
    }


||**Attribute**||**Required**||**Explanation**||
||uuid||Mandatory||UUID for the Package||
||owner_uuid||Optional||UUID of the owner of this Package||
||active||Mandatory||can be used for provisioning: true or false||
||vcpus||Required during provisioning if type == kvm||number of cpus to show, Integer 1 - 64||
||cpu_cap||Mandatory||CPU CAP,Integer 20-1000, formula: VCPU * Bursting Ratio * OverProvision Ratio * 100 + (vCPU <= 1 ? 50: 100)||
||default||Mandatory||is this the default package: true or false||
||group||Optional||group of associated instance types, either: Standard, High CPU, High Memory, High Storage, High IO or the Customer's Name||
||description||Optional||description of this instance type||
||max_lwps||Mandatory||max processes, Integer||
||max_physical_memory||Mandatory||max RAM in MB, Integer||
||max_swap||Mandatory||max SWAP in MB, Integer||
||name||Mandatory||API name. JPC uses this formula to name packages: [version]-[familyname]-[RAM GB]-[type]-[flags], version is currently g3, familyname is group, type is either smartos or kvm, flags is to catch cluster computes (cc)||
||common_name||Optional||Name displayed in the Portal||
||quota||Mandatory||disk size in MB||
||networks||Optional||List of networks to associate with||
||version||Mandatory||semver version number||
||parent||Optional, useful only if a package is created for a customer from another package||API name of the instance type this was cloned from||
||traits||Optional||set of traits for provisioning, currently limited to ssd:true and storage:true by current server installation||
||zfs_io_priority||Mandatory||ZFS IO Priority, Integer 0 - 1000||
||fss||Optional||Typically computed value, formula: OverProvision Ratio == 1 ? CPU_CAP: (Guest DRAM/Host DRAM provisionable) * Host CPUs * 100||
||cpu_burst_ratio||Optional||Typically computed value, formula: (CPU_CAP / (OverProvision Ratio * Burst Ratio))/FSS||
||ram_ratio||Optional||Typically computed value, formula: RAM GB/((CPU_CAP/100)*Bursting Ratio * OverProvision Ratio)||
||overprovision_cpu||Optional||Overprovision CPU, 1=don't overprovision, 2=overprovision||
||overprovision_memory||Optional||Overprovision Memory, 1=don't overprovision, 2=overprovision||
||overprovision_storage||Optional||Overprovision Storage, 1=don't overprovision, 2=overprovision||
||overprovision_network||Optional||Overprovision Network, 1=don't overprovision, 2=overprovision||
||overprovision_io||Optional||Overprovision IO, 1=don't overprovision, 2=overprovision||


### Immutable Attributes and Package Persistence

Additionally, the following package attributes are considered _immutable_:
`uuid`, `name`, `version`, `quota`, `max_swap`, `max_physical_memory`,
`cpu_cap`, `max_lwps`, `zfs_io_priority`, `vcpus`.

Any attempt to modify these attributes will result into a `409` HTTP response.

Reason for immutability is that packages are used as source of information for
the initial specifications of a machine and, therefore, if some package
attributes used for billing are modified once a package has been used during
machine provisioning, that would invalidate the package to be used as source
of billing information for any machine created following the package specs
before the moment of the change.

In case of the need to modify any of these attributes for an existing package,
the way to proceed would be creating a new package with:

- Same `name` and newest `version` of the one we would like to modify.
- Mark the new package as `active`
- Set `active: false` for the old package.

For this same reason, **packages cannot be deleted**, and any attempt to remove
a package will result into a `405` HTTP response.

Once a package has been used as the base specification to create a machine, it
must be available as source of information for billing systems forever.
