---
title: SDC 7 Package API
markdown2extras: wiki-tables, code-friendly
apisections: PackageObjects, Packages, Ping, Changelog
---

# SDC 7 Package API

Note that, internally, with independence of the name choosen by Marketing,
specifications used to create a machine from a given image are called packages,
and referred as packages by all the APIs.

Some of the package attributes are used by `vmadm` to create/resize machines.
Please, refer to [vmadm man page](https://github.com/joyent/smartos-live/blob/master/src/vm/man/vmadm.1m.md#properties) to
review the meaning of these properties for the machines.

# PackageObjects

Package entries are stored in Moray in the form of JSON objects. Here is
an example of a package:


    {
        uuid: "7fc87f43-2def-4e6f-9f8c-980b0385b36e",
        active: true,
        cpu_cap: 25,
        default: false,
        group: "Standard",
        description: "Micro 0.25 GB RAM 0.125 CPUs 16 GB Disk",
        max_lwps: 4000,
        max_physical_memory: 256,
        max_swap: 512,
        name: "g3-standard-0.25-smartos",
        common_name: "Standard 0.25",
        quota: 16384,
        networks: ["1e7bb0e1-25a9-43b6-bb19-f79ae9540b39", "193d6804-256c-4e89-a4cd-46f045959993"],
        version: "1.0.0",
        zfs_io_priority: 100,
        fss: 25,
        cpu_burst_ratio: 0.5,
        ram_ratio: 1.995012469,
        overprovision_cpu: 2,
        overprovision_memory: 1
    }


||**Attribute**||**Required**||**Explanation**||
||uuid||Mandatory||UUID for the Package||
||owner_uuid||Optional||UUID of the owner of this Package||
||active||Mandatory||can be used for provisioning: true or false||
||vcpus||Required during provisioning if type == kvm||number of cpus to show, Integer 1 - 64||
||cpu_cap||Mandatory||CPU CAP,Integer 20-1000, formula: VCPU * Bursting Ratio * OverProvision Ratio * 100 + (vCPU <= 1 ? 50: 100)||
||default||Mandatory||is this the default package: true or false||
||group||Optional||group of associated instance types, either: Standard, High CPU, High Memory, High Storage, High IO or the Customer's Name||
||description||Optional||description of this instance type||
||max_lwps||Mandatory||max processes, Integer||
||max_physical_memory||Mandatory||max RAM in MB, Integer||
||max_swap||Mandatory||max SWAP in MB, Integer||
||name||Mandatory||API name. JPC uses this formula to name packages: [version]-[familyname]-[RAM GB]-[type]-[flags], version is currently g3, familyname is group, type is either smartos or kvm, flags is to catch cluster computes (cc)||
||common_name||Optional||Name displayed in the Portal||
||quota||Mandatory||disk size in MB||
||networks||Optional||List of networks to associate with||
||min_platform||Optional||Object, k/v List of minimal supported OS platforms||
||version||Mandatory||semver version number||
||parent||Optional, useful only if a package is created for a customer from another package||API name of the instance type this was cloned from||
||traits||Optional||set of traits for provisioning, currently limited to ssd:true and storage:true by current server installation||
||zfs_io_priority||Mandatory||ZFS IO Priority, Integer 0 - 1000||
||fss||Optional||Typically computed value, formula: OverProvision Ratio == 1 ? CPU_CAP: (Guest DRAM/Host DRAM provisionable) * Host CPUs * 100||
||cpu_burst_ratio||Optional||Typically computed value, formula: (CPU_CAP / (OverProvision Ratio * Burst Ratio))/FSS||
||ram_ratio||Optional||Typically computed value, formula: RAM GB/((CPU_CAP/100)*Bursting Ratio * OverProvision Ratio)||
||overprovision_cpu||Optional||Overprovision CPU, 1=don't overprovision, 2=overprovision||
||overprovision_memory||Optional||Overprovision Memory, 1=don't overprovision, 2=overprovision||
||overprovision_storage||Optional||Overprovision Storage, 1=don't overprovision, 2=overprovision||
||overprovision_network||Optional||Overprovision Network, 1=don't overprovision, 2=overprovision||
||overprovision_io||Optional||Overprovision IO, 1=don't overprovision, 2=overprovision||



## Immutable Attributes and Package Persistence

Additionally, the following package attributes are considered _immutable_:
`uuid`, `name`, `version`, `quota`, `max_swap`, `max_physical_memory`,
`cpu_cap`, `max_lwps`, `zfs_io_priority`, `vcpus`.

Any attempt to modify these attributes will result into a `409` HTTP response.

Reason for immutability is that packages are used as source of information for
the initial specifications of a machine and, therefore, if some package
attributes used for billing are modified once a package has been used during
machine provisioning, that would invalidate the package to be used as source
of billing information for any machine created following the package specs
before the moment of the change.

In case of the need to modify any of these attributes for an existing package,
the way to proceed would be creating a new package with:

- Same `name` and newest `version` of the one we would like to modify.
- Mark the new package as `active`
- Set `active: false` for the old package.

For this same reason, **packages cannot be deleted**, and any attempt to remove
a package will result into a `405` HTTP response.

Once a package has been used as the base specification to create a machine, it
must be available as source of information for billing systems forever.



# Packages

The Packages endpoint let us get information about Packages on a single SDC setup,
there is only one PAPI instance per datacenter. PAPI acts as an HTTP interface to
Packages data stored in Moray.


## ListPackages (GET /packages)

Returns a list of Packages according the specified search filter.


### Inputs

All inputs are optional. Any attribute described into the
[Package Objects](#Package Objects) section can be used to build a search
filter.

PAPI provides the flexibility to add any arbitrary attribute to packages,
without the need to modify application code. These attributes will not be
indexed and, therefore, shouldn't be used to build search filters.

Additionally indexed fields can also be added to PAPI by modifying the `schema`
used by the application through [SAPI](https://mo.joyent.com/docs/sapi/master/).

Note that adding a new indexed field will not backfill existing package records,
and this operation should be done manually.

Please, refer to each setup `/opt/smartdc/papi/etc/config.json` file in order
to verify the fields being indexed and, therefore, usable for searches.


### Search filters

PAPI takes advantage of Moray facility to use [LDAP Search Filters](http://ldapjs.org/filters.html)
for object searches. If you specify any of the aforementioned input attributes
like:

    GET /packages?owner_uuid=907e0dac-f01a-4ded-ac97-7c286fcf1785
    GET /packages?name=sdc_128
    GET /packages?owner_uuid=907e0dac-f01a-4ded-ac97-7c286fcf1785&name=sdc_128

these will be used to build an [LDAP Equality Filter](http://ldapjs.org/filters.html#equalityfilter):

    (&(owner_uuid=907e0dac-f01a-4ded-ac97-7c286fcf1785))
    (&(name=sdc_128))
    (&(name=sdc_128)(owner_uuid=907e0dac-f01a-4ded-ac97-7c286fcf1785))

You can also use any of the other LDAP search filters by specifying the query
string argument `filter`. On such case, any of the aforementioned attributes
will be ignored, and whatever you specify as the value of `filter` will be used
to perform the search.

For example, if you want to search for all the packages with a RAM greater than
or equal to 1 GiB, where `fss` attribute is present, and with a name including
`sdc_`, your filter would be like:

    (&(name=sdc_*)(fss=*)(max_physical_memory>=1024))

and your request:

    GET /packages?filter=(%26(name=sdc_*)(fss=*)(max_physical_memory>=1024))

Note how the '&' character is escaped as '%26' since the query must be URL encoded.


### Collection Size Control Inputs

ListPackages also allows controlling the size of the resulting collection with the
use of the sort, limit and offset parameters. These three parameters can be used
on either the regular or the LDAP filter version of the ListPackages endpoint.

||**Param**||**Type**||**Description**||
||sort||String||Sort by any of the ListPackages attribute (except traits and networks).||
||order||String||Order direction. Either `ASC` or `DESC`||
||limit||Number||Return only the given number of Packages||
||offset||Number||Limit the collection starting at the given offset||

Note that every ListPackages request will return an `x-resource-count` HTTP
header with a value equal to the total number of Packages matching the given
search options, (or all the packages).


### Responses

||**Code**||**Description**||**Response**||
||200||||Array of Package objects||


## GetPackage (GET /packages/:uuid)

Returns a package with the specified UUID.


### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||Package UUID||Yes||
||owner_uuid||UUID||Package Owner||No||


### Responses

||**Code**||**Description**||**Response**||
||200||||Package object||
||404||Package not found||Error object||


### Example

    GET /packages/00956725-4689-4e2c-9d25-f2172f496f9c



## CreatePackage (POST /packages)

Creates a new package.


### Required Inputs

All the attributes set as `required` into the `etc/config.json` schema. Actually:

        "active",
        "cpu_cap",
        "default",
        "group",
        "description",
        "max_lwps",
        "max_physical_memory",
        "max_swap",
        "name",
        "common_name",
        "quota", 
        "version", 
        "zfs_io_priority"


### Optional inputs

Remaining attributes defined into schema plus any arbitrary attribute meaningful
for the current setup.


### Inputs validation

There are some attributes whose values must match some restrictions. In order
to get an updated list of these, you can check the [PAPI validations file](https://mo.joyent.com/papi/blob/master/lib/validations.js).


### Response Codes

||**Code**||**Description**||**Response**||
||201||New Package created||Package object||
||409||Missing parameter||Error object||
||409||Invalid parameter||Error object||


## UpdatePackage (PUT /packages/:uuid)

Performs an update operation into package non immutable fields.


### UpdatePackage General Inputs

Any package attribute not included into `etc/config.json` `immutable` setting.
Actually, the following is the list of immutable fields:

        "uuid",
        "name",
        "version",
        "quota",
        "max_swap",
        "max_physical_memory",
        "cpu_cap",
        "max_lwps",
        "zfs_io_priority",
        "vcpus"


### UpdatePackage Response Codes

||**Code**||**Description**||**Response**||
||200||Package updated||Package object||
||404||Package not found||Error object||
||409||Missing parameter||Error object||
||409||Invalid parameter||Error object||
||409||Attempt to modify immutable attribute||Error object||


## DeletePackage (DELETE /package/:uuid)

Packages cannot be destroyed.


### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||Package UUID||Yes||


### Responses

||**Code**||**Description**||**Response**||
||404||Package not found||Error object||
||405||Package cannot be deleted||Error object||


# Ping (GET /ping)

    GET /ping

When everythig is OK it should return something like:

    {
      "pid":1004,
      "backend":"up"
    }

If backend connection or ping attempt isn't OK, it'll return `down` together
with the backend error message:

    {
      "pid":1037,
      "backend":"down",
      "backend_error":"no connection"
    }


# Changelog


## 2013-06-15

- First PAPI version

