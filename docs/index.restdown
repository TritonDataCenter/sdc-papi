---
title: SDC 7 Package API
markdown2extras: wiki-tables, code-friendly
apisections: PackageObjects, Packages, Ping, Changelog
---

# SDC 7 Package API

The specifications used by SDC internally to create a machine from a given image
are called packages, and are referred to as packages by all the APIs. For
example, packages can specify the amount of RAM and CPU a new machine will use.
The word 'packages' is independent of the name chosen by marketing for the
outside world.

Some of the package attributes are used by `vmadm` to create or resize machines.
Please refer to the [vmadm man page](https://github.com/joyent/smartos-live/blob/master/src/vm/man/vmadm.1m.md#properties)
to review the meaning of these properties for the machines.




# Package objects

Package entries are stored in Moray in the form of JSON objects. Here is an
example of a package:


    {
        uuid: "7fc87f43-2def-4e6f-9f8c-980b0385b36e",
        active: true,
        cpu_cap: 25,
        default: false,
        group: "Standard",
        description: "Micro 0.25 GB RAM 0.125 CPUs 16 GB Disk",
        max_lwps: 4000,
        max_physical_memory: 256,
        max_swap: 512,
        name: "g3-standard-0.25-smartos",
        common_name: "Standard 0.25",
        quota: 16384,
        networks: ["1e7bb0e1-25a9-43b6-bb19-f79ae9540b39", "193d6804-256c-4e89-a4cd-46f045959993"],
        version: "1.0.0",
        zfs_io_priority: 100,
        fss: 25,
        cpu_burst_ratio: 0.5,
        ram_ratio: 1.995012469,
        overprovision_cpu: 2,
        overprovision_memory: 1
    }


|| **Attribute**         || **Required** || **Immutable** || **Type** || **Explanation**                                                                                         ||
|| uuid                  || true         || true          || uuid     || Package identifier.                                                                                     ||
|| owner_uuids           ||              ||               || array    || UUIDs of package owners.                                                                                ||
|| active                || true         ||               || boolean  || Whether it can currently be used for provisioning.                                                      ||
|| default               || true         ||               || boolean  || Whether this is the default package of this name through the SDC 6.5 API                                ||
|| name                  || true         || true          || string   || Name of package in API.                                                                                 ||
|| version               || true         || true          || string   || Semver version number.                                                                                  ||
|| common_name           ||              ||               || string   || Name displayed in the Portal.                                                                           ||
|| urn                   ||              ||               || string   || A type of universal identifier sometimes used by SDC.                                                   ||
|| parent                ||              ||               || string   || `name` of the instance this was cloned from. Useful only if a package is created for a customer from another package. ||
|| group                 ||              ||               || string   || Group of associated packages. E.g. High CPU, High Memory, High Storage, High IO or the customer's name. ||
|| description           ||              ||               || string   || Human description of this package.                                                                      ||
|| os                    ||              || true          || string   || Operating system for this package.                                                                      ||
|| vcpus                 || sometimes    || true          || integer  || Number of cpus to show, between 1 - 64. Required during provisioning if `type` == 'kvm'.                ||
|| cpu_cap               || true         || true          || integer  || Cap on how much CPU a machine can use. 100 = one core, 350 = 3.5 cores, etc.                            ||
|| max_lwps              || true         || true          || integer  || Max number of processes allowed                                                                         ||
|| max_physical_memory   || true         || true          || integer  || Max RAM in MiB.                                                                                         ||
|| max_swap              || true         || true          || integer  || Max swap in MiB.                                                                                        ||
|| quota                 || true         || true          || integer  || Disk size in MiB.                                                                                       ||
|| networks              ||              ||               || array    || UUIDs of networks that the machine requires access to.                                                  ||
|| min_platform          ||              ||               || hash     || Minimum version(s) of OS platforms that this package can use.                                           ||
|| traits                ||              ||               || hash     || Set of traits for provisioning to servers. See DAPI docs for details on traits.                         ||
|| zfs_io_priority       || true         || true          || integer  || ZFS I/O priority. This operates relative to other machines on a CN, determining which get I/O first.    ||
|| overprovision_cpu     ||              ||               || float    || Whether, and by how much, to overprovision CPU capacity.                                                ||
|| overprovision_memory  ||              ||               || float    || Whether, and by how much, to overprovision RAM.                                                         ||
|| overprovision_storage ||              ||               || float    || Whether, and by how much, to overprovision disk storage.                                                ||
|| overprovision_io      ||              ||               || float    || Whether, and by how much, to overprovision disk I/O.                                                    ||
|| overprovision_network ||              ||               || float    || Whether, and by how much, to overprovision network bandwidth.                                           ||
|| fss                   ||              ||               || integer  || Typically computed value. See below for more.                                                           ||
|| cpu_burst_ratio       ||              ||               || float    || Typically computed value. See below for more.                                                           ||
|| ram_ratio             ||              ||               || float    || Typically computed value. See below for more.                                                           ||
|| billing_tag           ||              ||               || string   ||                                                                                                         ||


## Immutable Attributes and Package Persistence

Some package attributes are immutable (see above table). Any attempt to modify
these attributes will result in a `409` HTTP response.

The reason these attributes are immutable is that packages are used as a source
of information about the dimensions of a machine. If certain package attributes
could be altered, it would invalidate packages as a reliable source for billing
information.

If an immutable value in a package needs to be altered, create a new package
with:

- Same `name` and newest `version` of the package we would like to modify.
- Use the altered value(s).
- Mark the new package as `active`, and set the old package to `active: false`

**Packages cannot be deleted** for the same reason, and any attempt to remove a
package will result in a `405` HTTP response.

Once a package has been used as the base specification to create a machine, it
must be available as source of information for billing systems forever.


## Overprovisioning

Overprovisioning sets an upper limit on how much a given dimension of a machine
can be overprovisioned. It is a ratio, thus 1.0 means no overprovisioning, 1.5
means overprovisioning by 50%, and so forth. Put another way, if
overprovision_cpu = 2.0, then twice as many of that type of machine could be
allocated on a set of CPU cores as overprovision_cpu = 1.0 machines could.
Overprovisioning can apply to CPU, RAM, disk space, disk I/O, and network
bandwidth. If an overprovision_* value is not provided in a package, it is left
to DAPI to decide whether to provide a default value, if any.


## Formulas

|| **Attribute**   || **Formula**                                                                                 ||
|| cpu_cap         || vCPU * Bursting Ratio * OverProvision Ratio * 100 + (vCPU <= 1 ? 50: 100)                   ||
|| fss             || OverProvision Ratio == 1 ? CPU_CAP: (Guest DRAM/Host DRAM provisionable) * Host CPUs * 100. ||
|| cpu_burst_ratio || (CPU_CAP / (OverProvision Ratio * Burst Ratio)) / FSS                                       ||
|| ram_ratio       || RAM GB / ((CPU_CAP / 100) * Bursting Ratio * OverProvision Ratio)                           ||
|| name            || JPC uses this formula to name packages: [version]-[familyname]-[RAM GB]-[type]-[flags], version is currently g3, familyname is group, type is either smartos or kvm, flags is to catch cluster computes (cc) ||




# Packages

The Package API's HTTP endpoints let us fetch and modify information about the
packages in an SDC installation. PAPI acts as an HTTP interface to package data
stored in Moray.


## ListPackages (GET /packages)

Returns a list of Packages matching the specified search filter.

### Security Warning

Since PAPI exposes several features of LDIF search filters, this entails that it
does not escape any values (most importantly: strings). If you're not using
features like '*' when querying, and you're searching for literal strings, then
make sure to encode those strings. Here's Javascript that can do that for you:

    return val.replace('(',  '{\\28}').
               replace(')',  '{\\29}').
               replace('\\', '{\\5c}').
               replace('*',  '{\\2a}').
               replace('/',  '{\\2f}');

If you're using values that could have potentially come from adversaries, even
indirectly, always encode all strings (including strings in arrays). If you do
not, an attacker could potentially sneak something like this past:

    GET /packages?owner_uuids=*

It's highly unlikely you want anybody other than operators to have that power.
When in doubt, encode.


### Inputs

All inputs are optional. Any attribute described in the
[Package Objects](#Package Objects) section can be used to build a search
filter.

PAPI provides the flexibility to add any arbitrary attributes to packages,
without the need to modify application code. These attributes will not be
indexed, and therefore shouldn't be used to build search filters.

Additional indexed fields can be added to PAPI by modifying the `schema` used by
the application through [SAPI](https://mo.joyent.com/docs/sapi/master/). Note
that adding a new indexed field will not backfill existing package records, so
this operation should be done manually.

Please refer to each setup `/opt/smartdc/papi/etc/config.json` file in order
to verify the fields being indexed, and thus searchable.


### Search filters

PAPI takes advantage of Moray facility to use
[LDAP Search Filters](http://ldapjs.org/filters.html) for object searches. If
you specify any of the aforementioned input attributes, like:

    GET /packages?owner_uuids=907e0dac-f01a-4ded-ac97-7c286fcf1785
    GET /packages?name=sdc_128
    GET /packages?owner_uuids=907e0dac-f01a-4ded-ac97-7c286fcf1785&name=sdc_128

these will be used to build an
[LDAP Equality Filter](http://ldapjs.org/filters.html#equalityfilter):

    (&(owner_uuids=907e0dac-f01a-4ded-ac97-7c286fcf1785))
    (&(name=sdc_128))
    (&(name=sdc_128)(owner_uuids=907e0dac-f01a-4ded-ac97-7c286fcf1785))

PAPI also allows searching for multiple values per attribute. For example, if
you're looking for all packages with the name "sdc_256" and "sdc_1024", then
encode the alternatives into a JSON array and provide that as the argument:

    GET /packages?name=["sdc_256","sdc_1024"]

The above will return any package that has either "sdc_256" or "sdc_1024" as a
name. This can be used to search any attributes with type float, double, number,
string, and boolean.

It is possible to search for matches within arrays. As an example, the networks
attribute can store several values. If you'd like to search for all packages
that use either the 33458263-d400-4a8b-8766-c260affa58f4 or
8582fa4e-8c57-49ce-ace5-3aa96ec0a792 networks, then:

    GET /packages?networks=["33458263-d400-4a8b-8766-c260affa58f4","8582fa4e-8c57-49ce-ace5-3aa96ec0a792"]

Another trick is that PAPI supports wildcards. To search for all packages
starting with the name "sdc_":

    GET /packages?name=sdc_*

And naturally, all of the above features can be combined:

    GET /packages?version=1.0.1&name=sdc_*&networks=["33458263-d400-4a8b-8766-c260affa58f4","8*"]

The one thing that cannot be searched are hashes. E.g. min_platform and traits.

Sometimes all the above simply isn't sufficiently powerful. You can also use any
of the other LDAP search filters by specifying the query string argument
`filter`. In that case, any of the above methods will be ignored, and whatever
you specify as the value of `filter` will be the only filter used to perform the
search.

For example, if you want to search for all the packages with a RAM greater than
or equal to 1 GiB, where the `fss` attribute is present, and with a name
including `sdc_`, the filter would be:

    (&(name=sdc_*)(fss=*)(max_physical_memory>=1024))

and your request:

    GET /packages?filter=(%26(name=sdc_*)(fss=*)(max_physical_memory>=1024))

Note how the '&' character is escaped as '%26', since the query must be URL-
encoded.


### Collection Size Control Inputs

ListPackages also allows controlling the size of the resulting collection with
use of the `sort`, `limit` and `offset` parameters. These three parameters can
be used on either the regular or LDAP filter version of the ListPackages
endpoint.

|| **Param** || **Type** || **Description**                                    ||
|| sort      || string   || Sort by any string or number package attribute.    ||
|| order     || string   || Order direction, either `ASC` or `DESC`.           ||
|| limit     || integer  || Return only the given number of packages.          ||
|| offset    || integer  || Limit the collection starting at the given offset. ||

Note that every ListPackages request will return an `x-resource-count` HTTP
header, with a value equal to the total number of packages matching the given
search options.


### Responses

|| **Code** || **Description** || **Response**             ||
|| 200      ||                 || Array of Package objects ||


## GetPackage (GET /packages/:uuid)

Returns the package with the specified UUID.

If owner_uuids are provided, the URL will return 404 if the package isn't
allowed to be listed for the given owner_uuids, even if that package UUID
exists. Packages which are allowed to be listed are all package which contain
the given owner_uuids, or no owner_uuids at all (univeral packages).

If providing owner_uuids, be aware that the multi-value trick using JSON arrays
which can be used with ListPackages also applies here.

*Important*: make sure to see the security warning in ListPackages when using
owner_uuids which could have come from adversaries, even indirectly.


### Inputs

|| **Param**   || **Type** || **Description** || **Required?** ||
|| uuid        || UUID     || Package UUID    || true          ||
|| owner_uuids || UUID     || Package Owners  ||               ||


### Responses

|| **Code** || **Description**   || **Response**   ||
|| 200      || Package found     || Package object ||
|| 404      || Package not found || Error object   ||


### Example

    GET /packages/00956725-4689-4e2c-9d25-f2172f496f9c


## CreatePackage (POST /packages)

Creates a new package.


### Required Inputs

All attributes listed in the `required` array in the `etc/config.json` schema.
See the first table above for the default required attributes.


### Optional inputs

Remaining attributes defined in the schema, plus any arbitrary attribute
meaningful for the current setup.


### Input validation

There are some attributes whose values must match some restrictions. In order
to get an updated list of these, you can check the
[PAPI validations file](https://mo.joyent.com/papi/blob/master/lib/validations.js).


### Response Codes

|| **Code** || **Description**     || **Response**   ||
|| 201      || New Package created || Package object ||
|| 409      || Missing parameter   || Error object   ||
|| 409      || Invalid parameter   || Error object   ||


## UpdatePackage (PUT /packages/:uuid)

Performs an update operation on a package's mutable attributes.


### UpdatePackage General Inputs

Any attributes not listed as immutable in the `etc/config.json` schema. See the
first table above for the default required attributes.

Some attributes support having no values. To delete an existing value, pass in
'null' as its value.


### UpdatePackage Response Codes

|| **Code** || **Description**                     || **Response**   ||
|| 200      || Package updated                     || Package object ||
|| 404      || Package not found                   || Error object   ||
|| 409      || Missing parameter                   || Error object   ||
|| 409      || Invalid parameter                   || Error object   ||
|| 409      || Will not modify immutable attribute || Error object   ||


## DeletePackage (DELETE /package/:uuid)

Packages cannot be destroyed.




# Errors

Errors returned from PAPI are in a standard format:

    {
        "code", "...",
        "message", "...",
        "errors": [
            {
                "field": "...",
                "code": "...",
                "message": "..."
            },
            ...
        ]
    }

An error message will always contain a top "code" and "message" attribute.
Sometimes an error message will contain an "errors" attribute, which describes
more specifically what went wrong.

Here are top-level codes you're likely to see:

|| **Code**         || **Description**                                               ||
|| ResourceNotFound || Effectively a 404.                                            ||
|| InvalidArgument  || Some attribute failed validation, or was otherwise incorrect. ||
|| ConflictError    || Attempt to create a package with an already-used UUID.        ||

Here are "errors"-level codes you're likely to see:

|| **Code** ||
|| Invalid  ||
|| Missing  ||

Not much to explain here: the attribute the code is part of was either invalid
or missing.




# Ping (GET /ping)

    GET /ping

When everything appears healthy to PAPI, it should return something like:

    {
      "pid":1004,
      "backend":"up"
    }

If the backend connection or ping attempt isn't okay, it'll return `down`
along with the backend error message:

    {
      "pid":1037,
      "backend":"down",
      "backend_error":"no connection"
    }


# Changelog


## 2013-10-28

- Minor tweaks

## 2013-06-15

- First PAPI version

