#!/usr/bin/env node
// vim: set filetype=javascript :

/*
 * Copyright (c) 2013, Joyent, Inc. All rights reserved.
 *
 * Utility to import sdcPackages from UFDS LDAP into sdc_packages bucket. This
 * is needed once during upgrade from UFDS to PAPI.
 *
 * Typical usage for importing from an LDIF file:
 *
 * ./bin/ldap-import --ldif packages.ldif
 *
 * Typical usage for importing from a JSON dump from mapi2moray:
 *
 * ./bin/ldap-import --json papi_packages.moray
 *
 * Typical usage for importing from UFDS:
 *
 * ./bin/ldap-import --url ldaps://ufds.coal.joyent.us --binddn 'cn=root' \
 *   --password 'secret'
 *
 * If binder is running, ufds.coal.joyent.us addresses can be set using:
 *
 * dig +short @10.99.99.11 ufds.coal.joyent.us A
 * ./bin/ldap-import --url ldaps://10.99.99.18 --binddn 'cn=root' \
 *   --password 'secret' --debug 1 2>&1 | bunyan
 */

var fs          = require('fs');
var nopt        = require('nopt');
var url         = require('url');
var path        = require('path');
var util        = require('util');
var restify     = require('restify');
var Logger      = require('bunyan');
var ldap        = require('ldapjs');
var vasync      = require('vasync');
var Backend     = require('../lib/backend');
var tools       = require('../lib/tools');
var validations = require('../lib/validations');



var DEFAULT_CFG = path.normalize(__dirname + '/../etc/config.json');

nopt.typeDefs.DN = {
    type: ldap.DN,
    validate: function (data, k, val) {
        data[k] = ldap.parseDN(val);
    }
};

var optTypes = {
    'debug': Number,
    'dryrun': Boolean,
    'binddn': ldap.DN,
    'password': String,
    'timeout': Number,
    'overwrite': Boolean,
    'url': url,
    'ldif': String,
    'json': String
};

var shortOpts = {
    'u': ['--url'],
    'l': ['--ldif'],
    'j': ['--json'],
    'D': ['--binddn'],
    'w': ['--password'],
    't': ['--timeout'],
    'o': ['--overwrite'],
    'd': ['--debug'],
    'y': ['--dryrun']
};

var perror; // loaded by main()



/*
 * Display usage of this program, then terminate.
 */

function usage(code, message) {
    var opts = '';

    Object.keys(shortOpts).forEach(function (k) {
        var opt = shortOpts[k];

        if (!Array.isArray(opt))
            return;

        var longOpt = opt[0].replace('--', '');
        var type = optTypes[longOpt].name || 'string';

        if (type === 'boolean')
            type = '';

        type = type.toLowerCase();

        opts += ' [--' + longOpt + ' ' + type + ']';
    });

    var basename = path.basename(process.argv[1]);
    var msg = (message ? message + '\n' : '') + 'usage: ' + basename + opts;

    process.stderr.write(msg + '\n');
    process.exit(code);
}



/*
 * Parse command-line args, and set defaults for some missing ones.
 */

function parseOpts() {
    try {
        var opts = nopt(optTypes, shortOpts, process.argv, 2);
    } catch (e) {
        usage(1, e.toString());
    }

    if (opts.help || !(opts.url || opts.ldif || opts.json))
        return usage(0);

    if (!opts.binddn)
        opts.binddn = 'cn=root';

    if (!opts.password)
        opts.password = 'secret';

    return opts;
}



/*
 * Convert LDIF or LDIF-like-JSON to more regular JS objects.
 */

var attrs2ignore = ['dn', 'objectclass', 'controls'];
var attrs2numerify = ['max_physical_memory', 'max_swap', 'vcpus', 'cpu_cap',
                      'max_lwps', 'quota', 'zfs_io_priority', 'fss',
                      'cpu_burst_ratio', 'ram_ratio', 'overprovision_cpu',
                      'overprovision_memory', 'overprovision_storage',
                      'overprovision_network', 'overprovision_io'];
var attrs2boolean = ['active', 'default'];

function decode(obj, log) {
    attrs2ignore.forEach(function (a) {
        delete obj[a];
    });

    attrs2numerify.forEach(function (a) {
        if (obj[a])
            obj[a] = Number(obj[a]);

        if (obj[a] === NaN)
            log.warn({ package: obj }, 'Number is NaN');
    });

    attrs2boolean.forEach(function (a) {
        obj[a] = (obj[a] === 'true' || obj[a] === true);
    });

    if (obj.networks) {
        if (typeof (obj.networks) === 'string') {
            try {
                obj.networks = JSON.parse(obj.networks);
            } catch (e) {
                obj.networks = [];
                log.error({ err: e, package: obj }, 'Error importing networks');
            }
        } else if (!Array.isArray(obj.networks)) {
            obj.networks = [];
            log.error({ package: obj }, 'Error importing networks');
        }
    }

    // we're changing from owner_uuid to owner_uuids here
    if (obj.owner_uuid) {
        if (typeof (obj.owner_uuid) === 'string') {
            try {
                obj.owner_uuids = JSON.parse(obj.owner_uuid);
            } catch (e) {
                obj.owner_uuids = [obj.owner_uuid];
            }
        } else if (!Array.isArray(obj.owner_uuid)) {
            obj.owner_uuids = [];
            log.error({ package: obj }, 'Error importing owners');
        } else {
            obj.owner_uuids = obj.owner_uuid;
        }

        delete obj.owner_uuid;
    }

    if (obj.traits) {
        try {
            obj.traits = JSON.parse(obj.traits);
        } catch (e) {
            obj.traits = {};
            log.error({ err: e, package: obj }, 'Error importing traits');
        }
    }

    if (obj.min_platform) {
        try {
            obj.min_platform = JSON.parse(obj.min_platform);
        } catch (e) {
            obj.min_platform = {};
            log.error({ err: e, package: obj }, 'Error importing min_platform');
        }
    }

    return obj;
}



/*
 * Load JSON from a file and return an array of package objects.
 */

function loadJsonPackages(config, log, cb) {
    return fs.readFile(config.json, 'utf8', function (err, jsonRows) {
        if (err)
            return cb(err);

        var packages = jsonRows.split('\n').map(function (json) {
            try {
                return decode(JSON.parse(json), log);
            } catch (e) {
                log.error({ err: e, json: json }, 'Error parsing JSON');
                return null;
            }
        });

        packages = packages.filter(function (p) { return p; });

        return cb(null, packages);
    });
}



/*
 * Load LDIF from a file and return an array of package objects.
 *
 * Takes an array of ldif lines, then combines and converts those lines into
 * an array of JS objects which represent the same data -- bundle lines from
 * the same ldif object into a JS object, convert string representations of
 * numbers into JS numbers, same for booleans, turn multiple ldif keys into
 * a JS array, and so forth.
 */

function loadLdifPackages(config, log, cb) {
    return fs.readFile(config.ldif, 'utf8', function (err, ldif) {
        if (err)
            return cb(err);

        var packages = [];
        var lookup = {};

        ldif.split('\n').forEach(function (line) {
            if (line === '') {
                if (Object.keys(lookup).length > 0) {
                    var pkg = decode(lookup, log);

                    if (pkg.uuid)
                        packages.push(pkg);

                    lookup = {};
                }
                return;
            }

            var match = line.match(/^([^:]+?): (.+)$/);

            if (match) {
                var name  = match[1];
                var value = match[2];
                var orig  = lookup[name];

                if (orig) {
                    if (Array.isArray(orig)) {
                        orig.push(value);
                    } else {
                        lookup[name] = [orig, value];
                    }
                } else {
                    lookup[name] = value;
                }
            }
        });

        return cb(null, packages);
    });
}



/*
 * Load all the sdcPackages from UFDS and return an array of package objects.
 */

function loadUfdsPackages(config, log, cb) {
    var packages = [];

    var client = ldap.createClient({
        url: config.url,
        log: log,
        timeout: config.timeout || false
    });

    client.once('error', function (err) {
        return cb(err);
    });

    client.once('timeout', function () {
        return cb('Timeout reached\n');
    });

    return client.bind(config.binddn, config.password, function (err, r) {
        if (err)
            return cb(err);

        var req = {
            scope: 'sub',
            filter: '(&(objectclass=sdcpackage))'
        };

        return client.search('o=smartdc', req, function (er, res) {
            if (er)
                return cb(er);

            res.on('searchEntry', function (entry) {
                var obj = decode(entry.object, log);
                packages.push(obj);
            });

            res.once('error', function (err2) {
                return cb(err2);
            });

            return res.once('end', function (res2) {
                if (res2.status !== 0)
                    return cb(ldap.getMessage(res2.status));

                return client.unbind(function () {
                    return cb(null, packages);
                });
            });
        });
    });
}



/*
 * Save an array of package objects into PAPI, checking for duplicates.
 */

function savePapiPackages(packages, config, log, callback) {
    var backend = new Backend(config);

    return backend.init(function (err) {
        if (err)
            return perror(err);

        var success = 0;
        var savePkg = function (pkg, next) {
            var validationErrs = validations.validate(pkg, backend.schema);

            if (validationErrs) {
                log.error({ pkg: pkg, err: validationErrs },
                          'Error importing package');
                return next();
            }

            if (config.dryrun) {
                log.info({ pkg: pkg }, 'Package imported');
                return next();
            }

            // updatePkg does a create-or-update
            var creator = config.overwrite ?
                          backend.updatePkg : backend.createPkg;

            var create = creator.bind(backend, pkg.uuid, pkg,
                                      { req_id: pkg.uuid },
                                      function (err2) {
                if (err2 === 'ObjectAlreadyExistsError') {
                    log.warn({ pkg: pkg }, 'Package already exists');
                } else if (err2) {
                    log.error({ pkg: pkg, err: err2 },
                              'Error importing package');
                } else {
                    log.info({ pkg: pkg }, 'Package imported');
                    success++;
                }

                return next();
            });

            return create();
        };

        vasync.forEachPipeline({ func: savePkg, inputs: packages },
                               function (err3) {
            if (err3)
                log.error({ err: err3 }, 'Error in pipeline saving to PAPI');

            log.info('%d packages imported to PAPI', success);
            backend.quit();
            callback();
        });

        return null;
    });
}



function selectPackageSource(opts) {
    var loader;

    if (opts.json) {
        loader = loadJsonPackages;
    } else if (opts.ldif) {
        loader = loadLdifPackages;
    } else if (opts.url) {
        loader = loadUfdsPackages;
    } else {
        // logic in parseOpts() should ensure we never end up here
        // TODO: look up how to get stack trace
        perror({ stack: null, message: 'Error selecting package source' });
    }

    return loader;
}



/*
 * Parse command-line args, load objects from UFDS, and save to PAPI.
 */

function main() {
    var opts = parseOpts();

    var logLevel = 'info';
    if (opts.debug)
        logLevel = (opts.debug > 1 ? 'trace' : 'debug');

    var sourceLog = new Logger({
        name: 'source',
        component: 'client',
        stream: process.stderr,
        level: logLevel
    });

    var papiLog = sourceLog.child({ component: 'papi' });

    var config = tools.configure(DEFAULT_CFG, {}, papiLog);
    config.dryrun    = opts.dryrun;
    config.overwrite = opts.overwrite;
    config.log       = papiLog;

    perror = function (err) {
        var errOut = (opts.debug ? err.stack : err.message);
        process.stderr.write(errOut + '\n');
        process.exit(1);
    };

    var loader = selectPackageSource(opts, sourceLog);

    loader(opts, sourceLog, function (err, packages) {
        if (err)
            return perror(err);

        sourceLog.info('%d packages loaded from source', packages.length);

        return savePapiPackages(packages, config, papiLog, function () {
            process.exit(0);
        });
    });
}



main();
